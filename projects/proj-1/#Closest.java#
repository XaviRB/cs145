import java.util.Scanner;

// This program reads in points in N-Space from System.in and reports the
// distance between the two closest points.
//
// The input format starts with the number of dimensions or, equivalently, the
// number of coordinates per point, followed by the number of points.  There are
// at least two points in the file.  For example, the following defines
// three-points in the x-y-plane:
//  2 
//  3
//  0.0 0.5
//  1.0 1.0
//  1.0 0.5
// In this case, the two closest points are the last two, (1,1) and (1,0.5).
// The program will print the distance: 0.5.
public class Closest {

	// Main
	//
	// Add Documentation
	public static void main(String[] arg) throws Exception {

		double[][] table = readTable(new Scanner(System.in));
		double dist = minDistance(table);
		System.out.println(dist);
	}

	// Read a 2D table
	// Expects the following file format:
	//  number_of_columns 
	//  number_of_rows
	//  first row of data
	//  second row of data
	//
	// For example, this is a table with two columns and three rows
	//  2
	//  3
	//  1.0 1.0
	//  0.0 1.0
	//  1.0 0.0
	public static double[][] readTable(Scanner input) {
	    int columns = input.nextInt();
	    int rows    = input.nextInt();
	    
	    double[][] table = new double[row][columns];
	    
	    for(int row = 0; row < rows; row++){
		for(int col = 0; col < columns; col++) {
		    table[row][col] = input.nextDouble();
		}
	    }
	    
	    return table;
	}


	// Minimum Distance
	// Finds and returns the distance between the two closest points in the
	// provided table of points.
	//
	public static double minDistance(double[][] table) {
	    double minDist = Double.POSITIVE_INFINITY;

	    for(int row = 0; row < table.length; row++){
		double dist = formula (table[row]);
		if(dist < minDist) {
		    minDist = dist;
		}
	    }

	       
	}
     

        //
        //
        //
        public static double formula(double[] point) {
	    double dist  = 0.0;
	    
	    for(int side = 0; side < point.length; side++){
		dist = dist + Math.pow(point[side], 2);
	    }

	    return Math.sqrt(dist);
    }
}
