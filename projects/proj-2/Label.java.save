import java.util.Scanner;

// This program reads two sets of labeled points in N-Space from System.in.  The
// second set of points are uniquely labeled and represent centroids in N-Space.
// The program changes the labels of the points in the first set to match the
// closes centroid.  The relabeled points and the centroids are printed in the
// same format.
//
// The input format starts with the number of dimensions or, equivalently, the
// number of coordinates per point, then the number of points in the
// first set, then the points in the first set, then the number of points in the
// second set, and finally the points in the second set.  For example,
//  2
//  3
//  red 0.0 0.5
//  red 1.0 1.0
//  red 1.0 0.5
//  2
//  red 0.0 0.0
//  green 1.0 1.0
//
// In this case, the program output should be the following:
//  2
//  3
//  red 0.0 0.5
//  green 1.0 1.0
//  green 1.0 0.5
//  2
//  red   0.0 0.0
//  green 1.0 1.0

public class Label {

	// Main
	//
	// Add Documentation
	public static void main(String[] arg) {
        	Scanner input = new Scanner(System.in);

        	int dim = input.nextInt();

       		Point[] points    = readPoints(input, dim);
        	Point[] centroids = readPoints(input, dim);

        	label(points, centroids);

        	System.out.println(dim);
        	writePoints(points);
        	writePoints(centroids);
	}

	static class Point{
		String label;
		double[] coord;
	}

    // Read Point
    // Reads a single point from input with dim dimensions.
    public static Point readPoint(Scanner input, int dim) {
        Point p  = new Point();
	p.coord  = new double[dim];

	p.label = input.next();

	for(int n = 0; n < dim; n++){
		p.coord[n] = input.nextDouble();
	}
	return p;
    }


    // Read Points
    //
    public static Point[] readPoints(Scanner input, int dim) {
	int quantity = input.nextInt();

	Point[] points = new Point[quantity];

	for(int i = 0; i < quantity; i++) {
		points[i] = readPoint(input, dim);
	}
	return points;
    }

    // Label
    // points     The points in the first set who's labels will be changed
    // centroids  The second set of points
    //
    // Relabel the points to match the label of the closest centroid
    public static void label(Point[] points, Point[] centroids) {
	for(int p = 0; p < points.length; p++){
		double minDist = 0.0;

		for(int c = 0; c < centroids.length; c++){
			double dist = 0;

			dist = formula(points[p], centroids[c]);

			if (dist < minDist) {
				minDist = dist;
				points[p].label = centroids[c].label;
	System.out.println(points[p].label);
			}
		}
    	}
    }


    // Write Point
    // Writes a single point to System.out as one line.
    public static void writePoint(Point p) {
	String k = p.label;
	System.out.println(k);
    }


    // Write Points
    //
    public static void writePoints(Point[] points) {
//	 System.out.println(points[].label);

    }

    public static double formula(Point point, Point centroids){
	double dist = 0;

	for(int col = 0; col < point.coord.length; col++) {
		dist = dist + Math.pow(point.coord[col] - centroids.coord[col], 2);
	}
	return Math.sqrt(dist);
	}


}
